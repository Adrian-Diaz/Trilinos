Muemex - MueLu Interface for MATLAB

<><><><><><><><><><>
Basic Instructions:
<><><><><><><><><><>

-Run "matlab" script in this directory to launch matlab with proper shared libraries
-Run "help muelu" from matlab to see detailed help for "muelu" function
-Basic setup for muelu is "problemID = muelu('setup', A);"
-Basic solve for muelu is "x = muelu(problemID, b);"
-Run "ctest" in this directory to run the experimental matlab tests for MueLu

<><><><><><><><><>
Full Instructions:
<><><><><><><><><>

Navigate to muelu/matlab/bin.
Run MATLAB through the "matlab" script.
Alternatively, find the value for $LD_PRELOAD printed by the "./matlab" script and set it yourself.
Then MATLAB can be run directly with

    matlab -nosplash -nojvm

The "muelu" function will only be available if "muelu/matlab/bin" is in MATLAB's path.
If you want to use it from a different directory, run

    "addpath('path/to/matlab/bin');"

from within MATLAB.

With a sparse matrix A, set up a MueLu hierarchy:

    problemID = muelu('setup', A);

Run

    A = laplacianfun([50, 50]);

to get a 50x50 2D Laplace matrix.

Note: any number of problems can be set up at a time.
Optionally, pass A and fine level coordinates:

    problemID = muelu('setup', A, coords);

Parameters for the "easy parameter list" are listed after A and coords:

    problemID = muelu('setup', A, coords, 'coarse: max size', 50);

Sublists can be passed using MATLAB cell arrays.

    problemID = muelu('setup', A, 'level 0', {'aggregation: drop tol', 0.03}, 'level 1', {'aggregation: drop tol', 0.01});

XML parameter lists can also be used.

    problemID = muelu('setup', A, 'xml parameter file', 'myParams.xml');

The setup function can also return operator complexity:

    [problemID, oc] = muelu('setup', A);

By default, muemex uses Tpetra objects to store the MueLu preconditioner.
This can be customized by setting the parameter "Linear Algebra".

    problemID = muelu('setup', A, 'Linear Algebra', 'epetra');
    problemID = muelu('setup', A, 'Linear Algebra', 'tpetra');

Parameters can be strings, integers, booleans or arrays (full or sparse, real
or complex).

Solve a problem with b as the right-hand side vector(s):

    x = muelu(problemID, b);
    x = muelu(problemID, A, b);

The solve function can also return the number of iterations taken by Belos:

    [x, numIters] = muelu(problemID, b);

The first version uses the A that was passed when setting up the problem.
The second version uses a new A with the same hierarchy.

Remove a specific problem and free memory associated with it:

    muelu('cleanup', problemID);

or all problems:

    muelu('cleanup');

List basic information about problem(s):

    muelu('status', problemID);
    muelu('status');

Get data from a level:

    data = muelu('get', problemID, levelID, dataName);

This works if dataName is A, P, R, Nullspace, Coordinates, or Aggregates.
Otherwise, the data type must also be specified.
    
    data = muelu('get', problemID, levelID, dataName, dataType);

For example, to get the finest prolongator matrix from problem 0, do

    P = muelu('get', 0, 1, 'P');

Or, to get non-standard data:
    
    myList = muelu('get', 0, 0, 'SpecialNodeList', 'OrdinalVector');

Matrix, MultiVector, OrdinalVector, Int, Scalar, Double and Complex are the supported types.
Note that any data retrieved this way must have a keep flag set on it during hierarchy setup.
For example, "Aggregates" are not normally available since they are discarded after P is created.
