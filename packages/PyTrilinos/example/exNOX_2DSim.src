#! /usr/bin/env python
# -*- python -*-

# @HEADER
# ************************************************************************
#
#                PyTrilinos: Python Interface to Trilinos
#                   Copyright (2010) Sandia Corporation
#
# Under terms of Contract DE-AC04-94AL85000, there is a non-exclusive
# license for use of this work by or on behalf of the U.S. Government.
#
# This library is free software; you can redistribute it and/or modify
# it under the terms of the GNU Lesser General Public License as
# published by the Free Software Foundation; either version 2.1 of the
# License, or (at your option) any later version.
#
# This library is distributed in the hope that it will be useful, but
# WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
# Lesser General Public License for more details.
#
# You should have received a copy of the GNU Lesser General Public
# License along with this library; if not, write to the Free Software
# Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA 02111-1307
# USA
# Questions? Contact Bill Spotz (wfspotz@sandia.gov)
#
# ************************************************************************
# @HEADER

#############################################################################
#
# This script solves the 2x2 problem
#
#     F[0] = x[0]^2 + x[1]^2 - 1  = 0
#     F[1] = x[1]   - x[0]^2      = 0
#
#############################################################################

# System imports
import numpy
from   optparse import *
import sys

#
# Parse the command-line arguments
parser = OptionParser()
parser.add_option("-t", "--testharness", action="store_true",
                  dest="testharness", default=False,
                  help="test local build modules; prevent loading system-installed modules")
parser.add_option("-v", "--verbosity", type="int", dest="verbosity", default=2,
                  help="set the verbosity level [default 2]")
options,args = parser.parse_args()

#
# Under normal usage, simply use 'from PyTrilinos import Epetra'.  For testing,
# we want to be able to control whether we import from the build directory or
# from a system-installed version of PyTrilinos.
from testutil import fromPyTrilinosImport
#Teuchos   = fromPyTrilinosImport('Teuchos'  , options.testharness)
Epetra    = fromPyTrilinosImport('Epetra'   , options.testharness)
#EpetraExt = fromPyTrilinosImport('EpetraExt', options.testharness)
NOX       = fromPyTrilinosImport('NOX'      , options.testharness)

class MyProblem(NOX.Epetra.Interface.Required,
                NOX.Epetra.Interface.Jacobian):

    def __init__(self):
        NOX.Epetra.Interface.Required.__init__(self)
        NOX.Epetra.Interface.Jacobian.__init__(self)
        self.__comm = Epetra.SerialComm()
        self.__map  = Epetra.Map(2, 0, self.__comm)
        self.__jac  = Epetra.CrsMatrix(Epetra.Copy, self.__map, 2)

    def getJacobian(self):
        return self.__jac

    def computeF(self,x,F,flag):
        try:
            F[0] = x[0]*x[0] + x[1]*x[1] - 1
            F[1] = x[1]      - x[0]*x[0]
        except Exception, e:
            print "Exception in MyProblem.computeF method"
            print e
            return False
        return True

    def computeJacobian(self, x, Jac):
        try:
            print "jacobian =", type(Jac)
            print "calling InsertGlobalValues..."
            Jac.InsertGlobalValues(0, [ 2*x[0], 2*x[1]], [0,1])
            print "calling InsertGlobalValues..."
            Jac.InsertGlobalValues(1, [-2*x[0], 1     ], [0,1])
            print "calling FillComplete..."
            Jac.FillComplete()
            print "done"
        except Exception, e:
            print "Exception in MyProblem.computeJacobian method"
            print e
            return False
        return True

def main():
    soln      = Epetra.Vector([.5,.5])
    initGuess = Epetra.Vector([.5,.5])
    problem   = MyProblem()
    jacobian  = problem.getJacobian()
    print "jacobian =", jacobian.Label()
    print "Constructing solver"
    solver    = NOX.Epetra.defaultSolver(initGuess,problem,problem,jacobian)

    print "Calling solve() method"
    solveStatus = solver.solve()
    print "Solve complete"

    finalGroup = solver.getSolutionGroup()
    finalSoln  = finalGroup.getX()

main()
