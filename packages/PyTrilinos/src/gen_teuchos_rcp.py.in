#! /usr/bin/env python
#! ${PYTHON_EXECUTABLE}
# -*- python -*-

import glob
import os
import re

################################################################################

def get_input_files():
    excludes = ("Teuchos_RCP_typemaps.i")

    os.chdir("${CMAKE_CURRENT_SOURCE_DIR}")
    result = glob.glob("Teuchos*.i")
    if ("${PyTrilinos_ENABLE_Epetra}"):
        result.extend(glob.glob("Epetra*.i"))
    if ("${PyTrilinos_ENABLE_Triutils}"):
        result.extend(glob.glob("TriUtils*.i"))
    if ("${PyTrilinos_ENABLE_Tpetra}"):
        result.extend(glob.glob("Tpetra*.i"))
    if ("${PyTrilinos_ENABLE_Domi}"):
        result.extend(glob.glob("Domi*.i"))
    if ("${PyTrilinos_ENABLE_EpetraExt}"):
        result.extend(glob.glob("EpetraExt*.i"))
    if ("${PyTrilinos_ENABLE_Isorropia}"):
        swig_files = glob.glob("Isorropia*.i")
        for file in swig_files:
            if "Epetra" in file:
                if "${PyTrilinos_ENABLE_Epetra}":
                    result.append(file)
            else:
                result.append(file)
    if ("${PyTrilinos_ENABLE_Pliris}"):
        result.extend(glob.glob("Pliris*.i"))
    if ("${PyTrilinos_ENABLE_AztecOO}"):
        result.extend(glob.glob("AztecOO*.i"))
    if ("${PyTrilinos_ENABLE_Galeri}"):
        result.extend(glob.glob("Galeri*.i"))
    if ("${PyTrilinos_ENABLE_Amesos}"):
        result.extend(glob.glob("Amesos*.i"))
    if ("${PyTrilinos_ENABLE_Ifpack}"):
        result.extend(glob.glob("IFPACK*.i"))
    if ("${PyTrilinos_ENABLE_Komplex}"):
        result.extend(glob.glob("Komplex*.i"))
    if ("${PyTrilinos_ENABLE_Anasazi}"):
        result.extend(glob.glob("Anasazi*.i"))
    if ("${PyTrilinos_ENABLE_ML}"):
        result.extend(glob.glob("ML*.i"))
    if ("${PyTrilinos_ENABLE_NOX}"):
        swig_files = glob.glob("NOX*.i")
        for file in swig_files:
            if "Epetra" in file:
                if "${PyTrilinos_ENABLE_Epetra}":
                    result.append(file)
            else:
                result.append(file)
    if ("${PyTrilinos_ENABLE_LOCA}"):
        swig_files = glob.glob("LOCA*.i")
        for file in swig_files:
            if "Epetra" in file:
                if "${PyTrilinos_ENABLE_Epetra}":
                    result.append(file)
            else:
                result.append(file)

    for e in excludes:
        if e in result:
            result.remove(e)

    return result

################################################################################

def get_header_files():
    result = ["PyTrilinos_config.h"]
    result.append("PyTrilinos_Teuchos_Headers.hpp")
    if ("${PyTrilinos_ENABLE_Epetra}"):
        result.append("PyTrilinos_Epetra_Headers.hpp")
    if ("${PyTrilinos_ENABLE_Epetra}"):
        result.append("PyTrilinos_EpetraExt_Headers.hpp")
    if ("${PyTrilinos_ENABLE_Domi}"):
        result.append("Domi_DefaultNode.hpp")
    if ("${PyTrilinos_ENABLE_Tpetra}"):
        result.append("Tpetra_ConfigDefs.hpp")

    return result

################################################################################

def get_typedefs():
    result = []
    if ("${PyTrilinos_ENABLE_Tpetra}"):
        result.append(("Tpetra::Details::DefaultTypes::scalar_type",
                       "DefaultScalarType"))
        result.append(("Tpetra::Details::DefaultTypes::local_ordinal_type",
                       "DefaultLOType"))
        result.append(("Tpetra::Details::DefaultTypes::global_ordinal_type",
                       "DefaultGOType"))
        result.append(("Tpetra::Details::DefaultTypes::node_type",
                       "DefaultNodeType"))

    return result

################################################################################

def parse_class(classname):
    result = {}
    if classname[-1] != ">":
        name = classname
        templates = []
    else:
        open_brackets = 1
        index = len(classname) - 1
        while open_brackets > 0 and index > 0:
            index -= 1
            if classname[index] == ">":
                open_brackets += 1
            elif classname[index] == "<":
                open_brackets -= 1
        name = classname[:index]
        templates = classname[index:].split(",")
    components = name.split("::")
    if len(components) == 1:
        result["namespaces"] = []
    else:
        result["namespaces"] = components[:-1]
    result["name"] = components[-1]
    result["template_args"] = []
    for i in range(len(templates)):
        result["template_args"].append("ARG%d" % (i+1))
    return result

################################################################################

def form_class_filename(parsed_class):
    if parsed_class["name"].startswith("Epetra_"):
        ext = ".h"
    elif parsed_class["name"].startswith("Amesos_"):
        ext = ".h"
    elif parsed_class["name"].startswith("AztecOO_"):
        ext = ".h"
    elif parsed_class["name"].startswith("Ifpack_"):
        ext = ".h"
    elif parsed_class["name"].startswith("Komplex_"):
        ext = ".h"
    elif parsed_class["name"] == "Pliris":
        ext = ".h"
    elif parsed_class["name"].startswith("Trilinos_Util_"):
        ext = ".h"
    elif parsed_class["namespaces"][0] == "EpetraExt":
        ext = ".h"
    elif parsed_class["namespaces"][0] == "MLAPI":
        ext = ".h"
    elif parsed_class["namespaces"][0] in ("NOX", "LOCA"):
        ext = ".H"
    else:
        ext = ".hpp"
    result = ""
    for namespace in parsed_class["namespaces"]:
        result += (namespace + "_")
    if parsed_class["namespaces"] == ["Teuchos"] and \
       parsed_class["name"].endswith("Comm"):
        result += ("Default" + parsed_class["name"] + ext)
    else:
        result += (parsed_class["name"] + ext)

    return result    

################################################################################

def get_rcp_classes(swig_filenames):
    match_excludes = ("##", "CLASS", "%shared_ptr", "ostream", "std::vector")
    regexes = [re.compile(r"%teuchos_rcp\((.+)\)"       , re.MULTILINE),
               re.compile(r"%teuchos_rcp_dap\(.+,(.+)\)", re.MULTILINE)]
    result = set()
    for filename in swig_filenames:
        text = open(filename, 'r').read()
        for regex in regexes:
            matches = regex.findall(text)
            for match in matches:
                add_match = True
                for me in match_excludes:
                    if me in match: add_match = False
                if add_match:
                    match = match.replace("< ","<")
                    match = match.replace(" >",">")
                    match = match.replace(">>","> >")
                    result.add(match)
    # Hack for Tpetra
    if "Tpetra.i" in swig_filenames:
        regex = re.compile(r"%tpetra_scalars\((.+),.+\)", re.MULTILINE)
        text = open("Tpetra.i",'r').read()
        matches = regex.findall(text)
        for scalar in matches:
            if "SCALAR" not in scalar:
                scalar = scalar.strip()
                result.add("Tpetra::DistObject<%s, PYTRILINOS_LOCAL_ORD, PYTRILINOS_GLOBAL_ORD, DefaultNodeType>" % scalar)
                result.add("Tpetra::MultiVector<%s, PYTRILINOS_LOCAL_ORD, PYTRILINOS_GLOBAL_ORD, DefaultNodeType>" % scalar)
                result.add("Tpetra::Vector<%s, PYTRILINOS_LOCAL_ORD, PYTRILINOS_GLOBAL_ORD, DefaultNodeType>" % scalar)
    # End hack for Tpetra
    result = list(result)
    for i in range(len(result)):
        rcp = result[i].strip()
        result[i] = rcp
    result.sort()
    return result

################################################################################

def reorder_classnames(classnames):
    base_classes = ["Epetra_VbrMatrix",
                    "Epetra_RowMatrix",
                    "Epetra_Operator",
                    "Epetra_SerialDenseOperator",
                    "Epetra_MultiVector",
                    "Epetra_BLAS",
                    "Epetra_Map",
                    "Epetra_BlockMap",
                    "Epetra_DistObject",
                    "Epetra_SrcDistObject",
                    "Epetra_CompObject",
                    "Epetra_Object",
                    "Teuchos::Describable",
                    "Teuchos::LabeledObject"]
    for classname in base_classes:
        if classname in classnames:
            classnames.remove(classname)
            classnames.insert(0,classname)

################################################################################

def main():
    swig_files    = get_input_files()
    header_files  = get_header_files()
    typedefs      = get_typedefs()
    teuchos_rcps  = get_rcp_classes(swig_files)
    reorder_classnames(teuchos_rcps)

    ############################################################
    # Generate the SWIG interface file for Teuchos.RCP
    ############################################################

    # Define the module
    print("%define %teuchos_rcp_docstring")
    print('"')
    print("PyTrilinos.Teuchos.RCP is a special PyTrilinos module designed to")
    print("provide access to RCP methods for PyTrilinos variables that are")
    print("stored internally via Teuchos::RCP reference counted pointers.")
    print("")
    print("Inspired by the python function sys.getrefcount(object), this module")
    print("provides a number of Teuchos::RCP methods as functions that take a")
    print("PyTrilinos object as their argument. These functions include:")
    print("")
    print("    * is_null(obj)        - Return True if underlying pointer is NULL")
    print("    * is_valid_ptr(obj)   - Return True if underlying pointer is valid")
    print("    * has_ownership(obj)  - Return True if this RCP owns the object")
    print("    * strong_count(obj)   - Return the strong reference count")
    print("    * weak_count(obj)     - Return the weak reference count")
    print("    * total_count(obj)    - Return the total reference count")
    print('"')
    print("%enddef")
    print("")
    print('%module(package   = "PyTrilinos.Teuchos",')
    print("        docstring = %teuchos_rcp_docstring) RCP")
    print("")

    # Specify include files directly into the wrapper file
    print("%{")
    print("// Import the NumPy interface")
    print("#define NO_IMPORT_ARRAY")
    print('#include "numpy_include.hpp"')
    print("")
    print("// Include the header files")
    for header in header_files:
        print('#include "%s"' % header)
    print("%}")

    # Tell SWIG about the DLL export macro
    print("")
    print("// Tell SWIG about the DLL export macros")
    print('%include "Teuchos_DLLExportMacro.h"')
    if ("${PyTrilinos_ENABLE_Epetra}"):
        print('%include "Epetra_DLLExportMacro.h"')

    # Turn off warnings
    print("")
    print("# pragma SWIG nowarn=314")
    print("# pragma SWIG nowarn=317")
    print("# pragma SWIG nowarn=325")
    print("# pragma SWIG nowarn=362")
    print("# pragma SWIG nowarn=389")

    # %import the Trilinos header files
    print("")
    print("// Import the Trilinos header files")
    for classname in teuchos_rcps:
        line = 'import "%s"' % form_class_filename(parse_class(classname))
        print("%" + line)
    print("")
    print("// SWIG NumPy interface file")
    print('%include "numpy.i"')
    print("")

    # Specify the python docstrings for the Teuchos.RCP functions
    print('%feature("docstring")')
    print("is_null")
    print('"is_null(obj) -> bool')
    print("")
    print("Return true if obj is a python wrapper for a C++ object stored as a")
    print('Teuchos::RCP and the underlying pointer is NULL"')
    print("")
    print('%feature("docstring")')
    print("is_valid_ptr")
    print('"is_valid_ptr(obj) -> bool')
    print("")
    print("Return true if obj is a python wrapper for a C++ object stored as a")
    print('Teuchos::RCP and the underlying pointer is valid"')
    print("")
    print('%feature("docstring")')
    print("has_ownership")
    print('"has_ownership(obj) -> bool')
    print("")
    print("Return true if obj is a python wrapper for a C++ object stored as a")
    print('Teuchos::RCP that has ownership of the underlying pointer"')
    print("")
    print('%feature("docstring")')
    print("strong_count")
    print('"strong_count(obj) -> int')
    print("")
    print("If obj is a python wrapper for a C++ object stored as a Teuchos::RCP,")
    print('return the strong reference count"')
    print("")
    print('%feature("docstring")')
    print("weak_count")
    print('"weak_count(obj) -> int')
    print("")
    print("If obj is a python wrapper for a C++ object stored as a Teuchos::RCP,")
    print('return the weak reference count"')
    print("")
    print('%feature("docstring")')
    print("total_count")
    print('"total_count(obj) -> int')
    print("")
    print("If obj is a python wrapper for a C++ object stored as a Teuchos::RCP,")
    print('return the total reference count"')

    # Define the Teuchos.RCP functions
    print("")
    print("%inline")
    print("{")
    print("")
    # Note: reverse teuchos_rcps to define functions for the base classes last
    for classname in reversed(teuchos_rcps):
        print("// %s" % classname)
        print("bool is_null(      Teuchos::RCP< %s > & object){ return object.is_null()      ; }" % classname)
        print("bool is_valid_ptr( Teuchos::RCP< %s > & object){ return object.is_valid_ptr() ; }" % classname)
        print("bool has_ownership(Teuchos::RCP< %s > & object){ return object.has_ownership(); }" % classname)
        print("int  strong_count( Teuchos::RCP< %s > & object){ return object.strong_count() ; }" % classname)
        print("int  weak_count(   Teuchos::RCP< %s > & object){ return object.weak_count()   ; }" % classname)
        print("int  total_count(  Teuchos::RCP< %s > & object){ return object.total_count()  ; }" % classname)
        print("")
    print("}")

################################################################################

if __name__ == "__main__":
    main()
